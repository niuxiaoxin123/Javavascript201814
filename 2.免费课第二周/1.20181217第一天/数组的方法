// 1. 方法的作用
// 2. 是否需要传参
// 3. 方法的返回值
// 4. 原有数组是否发生改变；

// 1. push
   1) : 向数组的末尾新增一项；
   2) : 需要传参
   3) : 新数组的长度
   4) : 原有数组变化
// 2. pop
   1) : 删除数组的最后一项
   2) : 不需要传参
   3) : 删除的那一项
   4) : 原有数组发生改变
// 3.unshift
   1) : 向数组的开头新增一项；
   2) : 需要传参
   3) : 新数组的长度
   4) : 原有数组变化
// 4.shift
   1) : 删除数组的第一项
   2) : 不需要传参
   3) : 删除的那一项
   4) : 原有数组发生改变
// 5.slice
   1) : 数组的截取
   2) : 需要参数.支持负数
      slice(m,n) : 从索引m开始截取到索引n,但是不包含n这一项
      slice(m) : 从索引m开始截取到数组的末尾
      slice() : 克隆一份一模一样的数组
   3) : 返回截取的数组；
   4) ：原有数组不发生改变
// 6.splice
   1  : 删除数组的某几项
   2  :
      splice(m,n) : 从索引m开始，删除n个
      splice(m) : 从索引m开始，删除到末尾
      splice(0) : 全部删除
      splice(m,n,x) : 替换；从索引m开始，删除n个，用x进行替换；
      splice(m,0,x) : 新增；从索引m的前一项新增x;
   3. 返回值删除的那几项；
   4. 原有发生改变；
// 7.sort
   1) : 对数组进行排序
   2) : 参数：
    1.没有参数，只能排相同位数的
    2. ary.sort(function(a,b){return a-b}) 从小到大
    3. ary.sort(function(a,b){return b-a}) 从大到小
   3) :返回值是排好序的数组
   4) :原有数组发生改变；

// 8.reverse
   1) : 将数组倒序排列
   2) : 不需要
   3) : 返回值是数组倒序之后的数组
   4) : 原有数组发生改变；

// 9.indexOf
   1) : 用来获取当前数组成员第一次出现的索引位置；
   2) : 需要参数；如果数组成员不存在这一项，返回-1；
   3) : 如果存在，返回当前项的索引，不存在返回-1；
   4) : 原有数组不发生改变；

// 10.lastIndexOf
   1) : 用来校验数组成员最后一次出现的索引位置
   2) : 需要参数，如果不存在返回-1;
   3) : 返回最后一次的索引或者是不存在就返回-1；
   4) : 原有数组不发生改变；
// 11. concat :
    1) : 数组的拼接；
    2) : 需要参数,如果没有参数，就是克隆一份一模一样的数组；
    3) : 拼接后的数组
    4) : 原有数组不变；
// 12.join
    1) : 按照指定的字符进行拼接成一个字符串；
    2) : 需要参数；如果不写，默认是逗号隔开
    3) : 返回一个连接后的字符串
    4) : 原有数组不变；

// 13. forEach
    1) : 用来遍历数组每一项；
    2) : 需要参数
       1. 第一个是数组的每一项
       2. 数组成员的索引
       3. 要循环的数组
    3): 返回值是undefined；
    4): 原有数组不发生改变；
// 14. map
    1) : 遍历、映射
    2) : 需要参数
    3) : 返回一个映射之后的数组
    4) : 原有数组不发生改变；


